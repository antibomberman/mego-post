syntax = "proto3";

package auth;
option go_package = "proto/auth";

// CreateUserRequest specifies a request to create a new user
message CreateUserRequest {
    // User type (see ./users.go)
    string type = 2;
    // Password (obligatory if type of user implies password auth)
    string password = 3;
    // FirstName - user first name (optional)
    string first_name = 4;
    // MiddleName - user middle name (optional)
    string middle_name = 5;
    // LastName - user last name (optional)
    string last_name = 6;
    // Email - user email (obligatory for user types with password auth)
    string email = 7;
    // Phone - user phone (obligatory for user types with sms-code auth)
    string phone = 8;
    // Avatar - link to avatar image (optional)
    string avatar = 9;
    // IsGuest - if user is a guest
    bool is_guest = 10;
    // Groups - user groups (obligatory)
    repeated string groups = 11;
}

// UserDetails - user details
message UserDetails {
    // first name
    string first_name = 1;
    // middle name
    string middle_name = 2;
    // last name
    string last_name = 3;
    // email
    string email = 4;
    // phone
    string phone = 5;
    // avatar link
    string avatar = 6;
    // if user is a guest
    bool is_guest = 7;
    // user groups
    repeated string groups = 8;
    // user explicit roles
    repeated string roles = 9;
}

// User
message User {
    // user id
    string id = 1;
    // user name
    string username = 2;
    // user type
    string type = 3;
    // authentication type
    string auth_type = 4;
    // user status
    string status = 5;
    // details
    UserDetails details = 6;
}

// GetByUsernameRequest
message GetByUsernameRequest {
    // user name
    string username = 1;
}

// GetByIdRequest
message GetByIdRequest {
    // user id
    string id = 1;
}

// PagingRequest - request search results in paged manner
message PagingRequest {
    // size of a page (100 by default)
    int32 size = 1;
    // index of presented page (0-based)
    int32 index = 2;
}

// PagingResponse search response in paged manner
message PagingResponse {
    // how many pages found
    int32 total = 1;
    // index of current page
    int32 index = 2;
}

// users search criteria
message SearchRequest {
    // paging support
    PagingRequest paging = 1;
    // user type
    string user_type = 2;
    // user name
    string username = 3;
    // status
    string status = 4;
    // email (strict value, no masks supported)
    string email = 5;
    // phone
    string phone = 6;
    // the user group users belong to
    string user_group = 7;
}

// result of search
message SearchResponse {
    // paging support
    PagingResponse paging = 1;
    // list of users
    repeated User users = 2;
}

// request to change user status
message SetStatusRequest {
    // user id
    string user_id = 1;
    // target status
    string status = 2;
}

// request to update user details
message UpdateUserDetailsRequest {
    // user Id
    string id = 1;
    // first name
    string first_name = 2;
    // middle name
    string middle_name = 3;
    // last name
    string last_name = 4;
    // avatar link
    string avatar = 5;
    // phone (update available if phone isn't a login)
    string phone = 6;
    // email (update available if email isn't a login)
    string email = 7;
}

// request to reset password
message ResetPasswordRequest {
    // user id
    string user_id = 1;
}

// response without params
message EmptyResponse {}

// request to add/delete user groups
message GroupsRequest {
    string user_id = 1;
    repeated string groups = 2;
}

// request to grant/revoke explicit roles
message RolesRequest {
    string user_id = 1;
    repeated string roles = 2;
}

message UserResponse {
    User user = 1;
}

// user service
service Users {
    // create a new user
    rpc CreateUser(CreateUserRequest) returns (User) {}
    // get user by its username
    rpc GetByUsername(GetByUsernameRequest) returns (UserResponse) {}
    // get user by id
    rpc Get(GetByIdRequest) returns (UserResponse) {}
    // search users
    rpc Search(SearchRequest) returns (SearchResponse) {}
    // set user status
    rpc SetStatus(SetStatusRequest) returns (User) {}
    // update user details
    rpc UpdateUserDetails(UpdateUserDetailsRequest) returns (User) {}
    // reset password
    rpc ResetPassword(ResetPasswordRequest) returns (EmptyResponse) {}
    // add user to groups
    rpc AddGroups(GroupsRequest) returns (User) {}
    // delete user from groups
    rpc DeleteGroups(GroupsRequest) returns (User) {}
    // grant roles to user
    rpc GrantRoles(RolesRequest) returns (User) {}
    // revoke roles from user
    rpc RevokeRoles(RolesRequest) returns (User) {}
}



